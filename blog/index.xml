<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rss on Сорок лет - это те же двадцать</title>
    <link>https://platoff.github.io/blog/index.xml</link>
    <description>Recent content in Blog-rss on Сорок лет - это те же двадцать</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <lastBuildDate>Sun, 22 Jan 2017 11:51:09 +0100</lastBuildDate>
    <atom:link href="https://platoff.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Осознавая Ярило</title>
      <link>https://platoff.github.io/blog/%D0%BE%D1%81%D0%BE%D0%B7%D0%BD%D0%B0%D0%B2%D0%B0%D1%8F-%D1%8F%D1%80%D0%B8%D0%BB%D0%BE/</link>
      <pubDate>Sun, 22 Jan 2017 11:51:09 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%BE%D1%81%D0%BE%D0%B7%D0%BD%D0%B0%D0%B2%D0%B0%D1%8F-%D1%8F%D1%80%D0%B8%D0%BB%D0%BE/</guid>
      <description>

&lt;p&gt;Две недели пытался в муках родить &lt;a href=&#34;https://platoff.github.io/blog/%D1%8F%D1%80%D0%B8%D0%BB%D0%BE/&#34;&gt;Ярило&lt;/a&gt;. Хоть я и обещал себе сделать все проще, схематично, и &amp;ldquo;прототипично&amp;rdquo;, но руки не слушались. Выкинув несколько вариантов модели данных, я даже потратил несколько дней портируя на Nim замечательную реализацию языка &lt;a href=&#34;http://wren.io&#34;&gt;Wren&lt;/a&gt;, от &lt;a href=&#34;http://journal.stuffwithstuff.com&#34;&gt;Bob Nystrom&lt;/a&gt; - мне показалось что Ярило хорошо ляжет на его модель, но, потратив эти дни, я почувствовал что опять двигаюсь в какую-то неправильную сторону.&lt;/p&gt;

&lt;p&gt;В результате я возвращаюсь примерно к тому же, что уже имел прошедшим летом в качестве прообраза &lt;a href=&#34;https://github.com/pragmagic/yarilo&#34;&gt;Ярило&lt;/a&gt;, но за эти две недели я родил одну важную мысль. Мысль кажется простой и с первого взгляда туповатой, но мне, по крайней мере в данный момент, она мне кажется важнейшей и ключевой: &lt;strong&gt;сборщика мусора не будет!&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Эта мысль у меня в голове расставила все на свои места. Чего я хочу? &lt;a href=&#34;https://platoff.github.io/blog/%D1%85%D0%BE%D1%87%D1%83-%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F/&#34;&gt;Я хочу делать Web-приложения&lt;/a&gt;, и под веб-приложениями я в первую очередь понимаю UI. Что такое UI? Это дерево. &lt;strong&gt;Дерево, блять!&lt;/strong&gt; Де-ре-во, а дерево &amp;ndash; это не граф. Какое замечательное свойство есть у дерева? В нем нет циклов, в нем (концептуально) на каждый элемент есть только &lt;strong&gt;одна ссылка&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Что такое state приложения в понимании большинства современных фреймворков? Это &lt;strong&gt;дерево&lt;/strong&gt;. Его так и называют - дерево состояния. Что такое UI приложение - это преобразование одного дерева в другое. Грубо говоря это то, чем пытается заниматься &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React.js&lt;/a&gt; и его друзья. Этот фундаментальный взгляд на UI приложение я не буду оспаривать, я с ним согласен на 100%. Но я хочу &lt;a href=&#34;https://platoff.github.io/blog/%D0%B0-%D0%BD%D1%83%D0%B6%D0%B5%D0%BD-%D0%BB%D0%B8-%D1%8F%D0%B7%D1%8B%D0%BA-self-adjusting-computation/&#34;&gt;большего&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Мне нужен механизм (это может быть язык программирования) описания того как одни части дерева преобразуются в другие части. В моих фантазиях, такие преобразования могут зависить друг от друга. Например новая нода в дереве состояний порождает новую ноду в дом), а та, в свою очередь порождает еще одну ноду DOM (например с переводом текста, в случае если в некотором месте дерева состояния включена опция трансляции). И так далее.&lt;/p&gt;

&lt;p&gt;Разницы между типами узлов дерева быть не должно. В том смысле что ноды состояния приложения, ноды описывающие DOM, или ноды хранящие трансиентные данные выглядят для приложения единообразно и я могу преобразовать что хочу во что хочу. Никто не мешает мне породить из UI некоторое состояние а потом его опять трансформировать в UI.&lt;/p&gt;

&lt;p&gt;И самое важное: &lt;strong&gt;я не хочу задумываться о деталях&lt;/strong&gt;. Состояние может быть огромным (по размеру), но я как пользователь должен иметь единообразый доступ к нему всему. Точно так же UI - я даже не должен знать что некоторая нода - это UI элемент. Я лишь хочу описать правила транформации и запустить приложение.&lt;/p&gt;

&lt;h1 id=&#34;сборка-мусора-и-linear-types&#34;&gt;Сборка мусора и Linear Types&lt;/h1&gt;

&lt;p&gt;Итак, мысль о том что сборка мусора не нужна и что наше приложение &amp;ndash; дерево, упорядочила все у меня в голове и несколько повлияло на дизайн языка. К сожалению, или к счастью, это не будет язык общего назначения. Концептуально &amp;ndash; все данные храняться в дереве, и только в дереве. Это значит, что если нода A и нода B не может иметь общего ребенка C. Даже если С ноды B создается из C ноды A в процессе трансформации &amp;ndash; то создасться копия C. Несомненно надо предусмотреть оптимизацию для immutable данных - в этом случае копия не имеет смысла, но опять же концептуально пользователь работает с деревом и только с деревом &amp;ndash; копируются ли immutable данные под капотом или нет &amp;ndash; не должно волновать пользователя.&lt;/p&gt;

&lt;p&gt;Я конечно погуглил на тему этой деревянной идеи - ничего толком не нашел, кроме &lt;a href=&#34;https://en.wikipedia.org/wiki/Substructural_type_system#Linear_type_systems&#34;&gt;Linear Types&lt;/a&gt; - это не совсем мой случай, а более общий, когда на объект может существовать одна и только одна ссылка. По теме не так много статей, и в основном недоступная мне математика о Linear Logic, но есть очень интересные стайки от &lt;a href=&#34;http://www.pipeline.com/~hbaker1/home.html&#34;&gt;Henry Baker&lt;/a&gt;, например о &lt;a href=&#34;http://www.pipeline.com/~hbaker1/LinearLisp.html&#34;&gt;Linear Lisp&lt;/a&gt; и стековых машинах в этом контексте &lt;a href=&#34;http://www.pipeline.com/~hbaker1/ForthStack.html&#34;&gt;Linear Logic and Permutation Stacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Этот путь (в Linear Logic) слишком умный для меня, я лишь буду руководствоваться правилом дерева. Технически, на ноду придется ссылаться не только из родительской ноды но и из обработчиков событий, процессов транформации, и так далее. Но еще раз: такие ссылки &amp;ndash; это забота движка. Концептуально данные &amp;ndash; дерево. Убили ноду &amp;ndash; все, кирдык, если кто-то ее слушал и во что-то трансформировал, то и ему кирдык &amp;ndash; трансформировался в ноль (хотя теоретически он может трансформировать &amp;ldquo;нулевую&amp;rdquo; ноду во что-то осмысленное).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>А нужен ли язык? (Self-adjusting Computation)</title>
      <link>https://platoff.github.io/blog/%D0%B0-%D0%BD%D1%83%D0%B6%D0%B5%D0%BD-%D0%BB%D0%B8-%D1%8F%D0%B7%D1%8B%D0%BA-self-adjusting-computation/</link>
      <pubDate>Thu, 12 Jan 2017 17:28:05 +0200</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%B0-%D0%BD%D1%83%D0%B6%D0%B5%D0%BD-%D0%BB%D0%B8-%D1%8F%D0%B7%D1%8B%D0%BA-self-adjusting-computation/</guid>
      <description>&lt;p&gt;Зачем мне свой язык? Я не собираюсь делать язык ради языка, возможно я смогу обойтись без самодельного языка - и это было бы хорошо. Но пока не очень получается.&lt;/p&gt;

&lt;p&gt;Много думая об управлении состоянием приложения (в общем про то что делают ваши всякие flux/redux и так далее, в которые я тоже не вдупляю) я все чаще и чаще попаю на статьи о self-adjusted или incremental computations. Сейчас у вас популярны всяческие RxJS и подобные, и честно скажу я сам зафанател от ориниального Rx (Microsoft) в году так 2008, но все же по этому пути я не пойду: Erich, создатель Rx сделал выдающуюся вещь показав реактивные (асинхронные) counterparts синхронным примитивам типа Enumeration, которые мы пользовали всю жизнь, и он гений.&lt;/p&gt;

&lt;p&gt;Но говорить о том что мои приложения будут основаны на Observables это то же что и говорить что мои приложения будут основаны на Enumerables - если первое звучит только модно, не более, то и первое и второе по сути - хуйня и не о чем. Это не отменяет возможность использования мной реактивных паттернов, но  еще раз скажу что сам по себе Rx никаких фундаментальных проблем не решит.&lt;/p&gt;

&lt;p&gt;Для тех кто впервые слышит о self-adjusting computation, го на сайт Umut Acar - &lt;a href=&#34;http://www.umut-acar.org/self-adjusting-computation&#34;&gt;сайт Umut Acar&lt;/a&gt;, это чувак много лет занимающийся этим вопросом, там же можно найти некоторые статьи по теме.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Self-adjusting computation refers to a model of computing where computations can automatically respond to changes in their data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Я пролистал довольно много статей о self-adjusting computations, штука эта действительно выглядит мощно для UI приложений и не только, но и с первого взгляда не нова - грань между FRP и self-adjusted computation довольно тонка: и то и другое можно применять, и применяется для одних и тех же целей - декларативно описать вычисления и пойти курить оставив компьютер заниматься персчетом результатов при изменении входных данных (я сейчас очень грубо).&lt;/p&gt;

&lt;p&gt;И если мы стараемся не углубляться в разницу между тем и другим, то в мире JavaScript было и есть несколько продуктов близких к тому что мне хочется:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Жемчужина - это, конечно, &lt;a href=&#34;http://www.flapjax-lang.org&#34;&gt;Flapjax&lt;/a&gt;. Как это часто бывает с жемчужинами - они опережают время (готовность масс понять и принять), и умирают раньше чем стать тем, что пользует весь мир. Так было с объектно-ориентированными базами данных, да и много с чем. В общем очень достойная вещь и на пейпер flapjax есть много ссылок из вполне себе научных статек, жаль только то что самого flapjax уже нет.&lt;/li&gt;
&lt;li&gt;Есть на первый взгляд хороший выходец из практических кругов &lt;a href=&#34;https://github.com/mobxjs/mobx&#34;&gt;MobX&lt;/a&gt; - они себя называют TFRP (transparent functional reactive programming), пусть будет так - о терминах я спорить не буду.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ну и куча других проектов на различных языках, которые гуглятся по словам reactive и functional, но так легко докатиться до &lt;a href=&#34;http://elm-lang.org&#34;&gt;Elm&lt;/a&gt;. Я сознательно не упоминал Elm упоминая FRP. Elm - фантастическая вещь, лично для меня понятная и приятная тем, что у меня очень быстро получилось написать и запустить простенькую программу на Elm, чего я не смог сделать с помощю довольно мейнстримовых React, Cycle.js и подобное - количество пиздеца которое у меня не работает и количество обращений к гуглу бъет по моим нервам так что я бросаю это дело.&lt;/p&gt;

&lt;p&gt;Так, Elm можно считать эталоном FRP в вебе на данный момент. У проекта есть все - и сильный теоретический бекграунд (ссылок на &lt;a href=&#34;http://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf&#34;&gt;Elm папер&lt;/a&gt; не меньше чем на flapjax) и прекрасная реализация. Все же, несморя на то что я часто говорю о теоретических основах, я чел необразованный &amp;ndash; просто практик. Со всем уважением относясь к мотивации создателя Elm не делать first-class сигналы (ее невозможно оспорить, по крайней мере такому неспециалисту как я) - я чувствую, что на практике мне Elm не хватит. Мне хочется решения, которое позволит мне сколь угодно сложно менять граф вычислений во время исполнения, а это как я понимаю - главная проблема всех FRP решений на данный момент. Поэтому мне очень хочется выйти за рамки FRP (в понимании Elm) и я хочу посмотреть в какие-то другие стороны. Отсюда MobX и self-adjusting computation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ярило</title>
      <link>https://platoff.github.io/blog/%D1%8F%D1%80%D0%B8%D0%BB%D0%BE/</link>
      <pubDate>Wed, 11 Jan 2017 12:47:07 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D1%8F%D1%80%D0%B8%D0%BB%D0%BE/</guid>
      <description>

&lt;p&gt;Итак, &lt;a href=&#34;https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE-%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B8%D1%85-%D0%B8-%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D1%85-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%B2/&#34;&gt;я возвращаюсь к Ярило&lt;/a&gt;. Как я уже писал - мне не нужны инновации, мне нужен некоторый скриптинг язык, требования к которому я уточню по ходу. Но часть требований уже сейчас понятна.&lt;/p&gt;

&lt;h1 id=&#34;минимальные-требования&#34;&gt;Минимальные требования&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Я бы хотел &lt;a href=&#34;https://en.wikipedia.org/wiki/Homoiconicity&#34;&gt;Homoiconic Language&lt;/a&gt;. Язык, который хорошо подходит для создания DSL-ей. В этом случае на ум сразу приходит LISP. Современным чуавкам еще придет на ум Julia, но ее корни тоже в LISP, вернее в Scheme. Кому то придет в голову TCL, и так далее. В общем Lisp &amp;ndash; очевидный выбор, но ни одна моя попытка научиться легко программировать на Lisp не увенчалась успехом. Вместо Lisp я буду черпать вдохновение в &lt;a href=&#34;https://en.wikipedia.org/wiki/Rebol&#34;&gt;REBOL&lt;/a&gt;, который так же похож на Lisp как и не похож. Этих сходств и различий достаточно для того чтобы я (лично) мог программировать на Rebol не испытывая сложностей, одновоременно чувствуя всю &amp;ldquo;мощь&amp;rdquo; Lisp.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;REPL-oriented. Хороший пример REPL-ориентированного языка &amp;ndash; &lt;a href=&#34;https://en.wikipedia.org/wiki/PowerShell&#34;&gt;Microsoft PowerShell&lt;/a&gt;, но и TCL, да и вообще все Homoiconic языки достаточно неполхи для REPL. Что нужно сделать с Rebol, чтобы добавить удобства как REPL инструмента, я посмотрю в процессе.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;поехали&#34;&gt;Поехали&lt;/h1&gt;

&lt;p&gt;Постараюсь обойтись без прошлых ошибок и достигнуть полезного результата с минимальными усилиями. Соответственно:&lt;/p&gt;

&lt;p&gt;Отказываюсь от собственного GC и эффективного представления данных. Буду пользоваться GC предоставленным Nim, а соответственно структуры данных должны быть понимаемыми Nim. Значит отказываемся от тегирования указателей и прочих фишек - наша память должна выглядить для Nim как родная. В этом есть свой плюс - interoperability с Nim, но и минус в потере эффективности из за некоторой несовместимости моделей (у меня динамическая, и, возможно, слабая типизация).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Про хороших и полезных программистов</title>
      <link>https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE-%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B8%D1%85-%D0%B8-%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D1%85-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%B2/</link>
      <pubDate>Tue, 10 Jan 2017 09:00:57 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE-%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B8%D1%85-%D0%B8-%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D1%85-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%B2/</guid>
      <description>

&lt;p&gt;Последние несколько дней увлекся чтением про искусственный интеллект, но про ИИ я напишу отдельно. Сейчас же время вернуться к реальному программированию. Пора мне начать соединять точки.&lt;/p&gt;

&lt;h2 id=&#34;ярило&#34;&gt;Ярило&lt;/h2&gt;

&lt;p&gt;Летом 2016 я провел замечательною неделю на балконе в Новосибирске (а там можно это делать только летом, и то не всегда) в попытках вернуться к программированию. Результатом этой недели были наброски реализации языка программирования с временным названием &lt;a href=&#34;https://github.com/pragmagic/yarilo&#34;&gt;YARILO&lt;/a&gt;. Yet Another Rebol Inspired Language, Obviously!&lt;/p&gt;

&lt;p&gt;Язык не претендует на инновации, собственно инноваций там не задумывалось &lt;em&gt;вообще (совсем)&lt;/em&gt;. Но я интуитивно чувствую что без своего языка для скиптинга мне точки не соеденить. Поэтому я возвращаюсь к написанию языка.&lt;/p&gt;

&lt;p&gt;Прошедшим летом я накидал штук 5 вариантов и попался на обычную ошибку начинающего программиста - которая называется &lt;em&gt;делай сразу хорошо&lt;/em&gt;. Частный случай этой ошибки &amp;ndash; преждевременная оптимизация. Хотя почему ошибка начинающего? Есть дохуя программистов страдающих этим всю жизнь, старающихся делать хорошие программы, не делая при этом практически никакой &lt;em&gt;полезной работы&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Такие программисты может быть и хорошие (тут вся соль в определении термина &amp;ldquo;хороший программист&amp;rdquo;), но к сожалению бесполезные. Это то, что назвывется программированием ради программирования, и я действительно соскучившись по программированию все время потратил на разнообразную хуету, ничуть не приблизившись к полезному результату.&lt;/p&gt;

&lt;p&gt;В те дни Ярило, мне захотелось эффективно использовать память, из чего следовал собственный GC, трансляция в эффективный байт-код и так далее. Несколько часов я оптимизировал цикл интерпретатора, добивался возможности компилятора Nim/C использовать tail calls, а потом переписывал этот цикл к хуям, аннигилируя часы работы, и так далее. В общем я &lt;em&gt;программировал&lt;/em&gt;, но не &lt;em&gt;работал&lt;/em&gt;. Что естественно для человека который соскучился по программированию.&lt;/p&gt;

&lt;h2 id=&#34;хорошие-программисты&#34;&gt;Хорошие программисты&lt;/h2&gt;

&lt;p&gt;В общем я делал все то, что делают многие &amp;ldquo;хорошие&amp;rdquo; программисты. &amp;ldquo;Хороший&amp;rdquo; программист &amp;ndash; это программист, который программирует ради программирования, и их немало. Еще они за это получают деньги. Если бы это был реальный проект, и у меня был типичный менеджер, а я был бы на хорошем, счету как программист, то у нас бы случился match in heaven. Я бы каждый день показывал ему какой у нас охуенный прогресс (как мы ускорилсь тут или там, как у нас появился байткод и так далее), и объяснял бы что свой язык - сложная тема, и все эти вещи жизненно необходимы, чтобы взлетело (что безусловно правда).&lt;/p&gt;

&lt;p&gt;Правда через годик мы бы с этим менеджером соснули хуйца, по десятку причин, но мне как &amp;ldquo;хорошему&amp;rdquo; программисту нашлась бы другая задача. Так происходит у многих. Чтобы так не было - программист должен быть &lt;em&gt;полезным&lt;/em&gt;. Но типична и другая крайность - &amp;ldquo;Полезный&amp;rdquo; программист. И чем хуже программист как программист - тем он больше старается быть полезным (иначе нахуй он вообще нужен).&lt;/p&gt;

&lt;h2 id=&#34;полезные-программисты&#34;&gt;Полезные программисты&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Полезных&amp;rdquo; программистов не волнуют вопросы оптимизации (ни преждевременной ни последующей), дизайна, и прочих вещей - они слабо представляют себе каким должна быть архитектура проекта, чтобы взлетело. От таких программистов выходит то, что &amp;ldquo;хорошие&amp;rdquo; программисты называют словом &lt;em&gt;говнокод&lt;/em&gt; (я ненавижу это слово, и дальше объясню почему).&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Полезные&amp;rdquo; программисты, обычно, тоже отсасывают хуйца, но по причинам отличным от тех по которым отсасывают &amp;ldquo;хорошие&amp;rdquo; программисты. Полезные программисты погружаются в пучину &lt;em&gt;технического долга&lt;/em&gt;, который они не в состоянии гасить, и перестают быть полезными.&lt;/p&gt;

&lt;p&gt;Разговор &amp;ldquo;полезного&amp;rdquo; программиста с &amp;ldquo;хорошим&amp;rdquo; программистом &amp;ndash; это разговор слепого с глухим. Один лепит другому про технический долг, про так нельзя, тут у нас будут проблемы, надо вот так; второй отвечает про планы, сроки, задачи бизнеса, кастомеров и так далее. Часто &amp;ldquo;хорошим&amp;rdquo; программистам дают в помощь &amp;ldquo;полезного&amp;rdquo; менеджера &amp;ndash; и следствие тех же разговоров слепого с глухим мы видим в недовольстве программистов своим &amp;ldquo;тупым&amp;rdquo; менеджером, а менеджеров жалующихся на программистов.&lt;/p&gt;

&lt;h1 id=&#34;отличные-программисты&#34;&gt;Отличные программисты&lt;/h1&gt;

&lt;p&gt;Мне интересны и &amp;ldquo;хорошие&amp;rdquo; и &amp;ldquo;полезные&amp;rdquo; программисты, два в одном, назовем их &amp;ldquo;отличные&amp;rdquo;. Таких немного и их надо искать. Такой программист должен уметь хорошо мыслить и технически, и с точки зрения бизнеса, одновременно в нескольких временных масштабах, оптимизируя и полезность и качество работы &amp;ndash; типичный tradeoff в разработке. Причем если мыслить в одном масштабе (например текущего релиза), то оптимальное решение одно, а если мыслим более глобально, то оптимальное решение - другое. Отличный же программист может выбрать третье решение, которое может быть не оптимально ни для первого масштаба ни для второго, но позволит получить максимальную полезность и в первом и во втором масштабе, с минимальным техническим долгом во обоих случаях.&lt;/p&gt;

&lt;p&gt;Быть таким программистом &amp;ndash; значит уметь пройти между струй дождя на всем долгом цикле проекта. Таких немного и только такие могут быть успешными руководителями проекта. Слепые с глухими редко могут быть успешными в долгосрочных и сложных историях.&lt;/p&gt;

&lt;h1 id=&#34;говнокод&#34;&gt;Говнокод&lt;/h1&gt;

&lt;p&gt;Когда я слышу от программиста слово &amp;ldquo;говнокод&amp;rdquo;, ну например на собесе в ответ на вопрос про его прошлые места работы &amp;ndash; у меня сразу вколючается маячок: с этим человеком скорее всего что-то не так. Вероятнее всего передо мной &amp;ldquo;хороший программист&amp;rdquo;. Скорее всего я его не возьму на работу, а если и возьму, то мы скоро расстанемся. Мне не нужны &amp;ldquo;хорошие&amp;rdquo; программисты (с ними сложно добится &lt;em&gt;полезного&lt;/em&gt; результата), мне так же неинтересны &amp;ldquo;полезные&amp;rdquo; программисты &amp;ndash; с нимим невозможно достигать больших целей, да и не решить сложных задач.&lt;/p&gt;

&lt;p&gt;Люди, часто употребляющие слово &amp;ldquo;говнокод&amp;rdquo;, обычно &amp;ldquo;хорошие&amp;rdquo; программисты, и могут найти этот &amp;ldquo;говнокод&amp;rdquo; везде, даже в очень мной уважаемых проектах, достойных восхищения. Один мне как-то показывал &amp;ldquo;говонокод&amp;rdquo; от Erich Gamma. Еб твою мать, дружище, я и сам такое могу найти везде. но как ты можешь знать об условиях в которых находились люди написавшие этот код? Ты же как &amp;ldquo;хороший&amp;rdquo;, но &amp;ldquo;бесполезный&amp;rdquo; программист не думаешь об обратной совместимости, о текущих пользователях этого кода, о задачах бизнеса, о сроках, о тех кто ждет этого &amp;ldquo;фикса&amp;rdquo;, о том насколько это важно и так далее. А применимо к данному коду ты об этом ничего не знаешь.&lt;/p&gt;

&lt;p&gt;Я более чем уверен, что если бы тебя погрузили в ту ситуацию, и попросили найти оптимальное решение &lt;em&gt;всех&lt;/em&gt; стоящих задач &amp;ndash; ты бы не справился. В жизни часто бывает, что написать &amp;ldquo;хороший&amp;rdquo; код это не оптимальное, а часто губительное в долгосрочной перспективе решение для проекта. Да и не факт что твой код был бы лучше (хотя тут мы опять уходим в определение &amp;ldquo;хорошего&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;К чему я все это написал? Ах, да, пора мне вернуться к Ярило, и все таки написать этот язычок, и поскольку теперь у меня есть &lt;a href=&#34;https://platoff.github.io/about/&#34;&gt;цель&lt;/a&gt;, то в этот раз работа моя должна быть полезной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Балуюсь с запросами</title>
      <link>https://platoff.github.io/blog/%D0%B1%D0%B0%D0%BB%D1%83%D1%8E%D1%81%D1%8C-%D1%81-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D0%B0%D0%BC%D0%B8/</link>
      <pubDate>Wed, 04 Jan 2017 10:48:40 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%B1%D0%B0%D0%BB%D1%83%D1%8E%D1%81%D1%8C-%D1%81-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D0%B0%D0%BC%D0%B8/</guid>
      <description>&lt;p&gt;Отвелекусь немного на сами данные. Сейчас отношения примитивно и неоптимально со всех точек зрения. Пока я предполагаю что весь &lt;code&gt;state&lt;/code&gt; (и persistent и transient) будет валятся в таких структурах. Хочется проверить насколько это все реально, соответственно хочу померить уже известную мне dbmonster модель. Захуярю-ка я ее в &amp;ldquo;базу&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;В datomic (или RDF-alike) модель запихать монстра оказалось даже быстрее чем в объекты конкретных классов: вот весь код создания базы:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Nimrod&#34; data-lang=&#34;Nimrod&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;DatabaseName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Elapsed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Waiting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;SQL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Queries&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;genQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Elapsed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Waiting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;vacuum&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;IDLE&amp;gt; in transaction&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;SELECT blah FROM something&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SQL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  
&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;genDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DatabaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;       
    &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Queries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sizeof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Order&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ROWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;discard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;cluster&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;discard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;genDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;cluster&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; slave&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Запускаем, и видим ожидаемую жопу: &lt;code&gt;1.8ms&lt;/code&gt; на генерацию для 200 монстробаз. Это нативно. Напомню что оригинал генерировал данные за &lt;code&gt;0.36ms&lt;/code&gt; нативно. Интересно, что уменьшая количество данных в 2 раза, время построения уменьшается линейно до 0.9ms, что говорит о том что неэффктивность где-то в сериализации тупла, а не в уебищной структуре данных (можно было ожидать что тормозит вставка с сортировкой, но походу нет).&lt;/p&gt;

&lt;p&gt;Пробую V8. Оригинал &amp;ndash; &lt;code&gt;1ms&lt;/code&gt;. &amp;ldquo;База данных&amp;rdquo; &amp;ndash; полная сракотень &lt;code&gt;18.9ms&lt;/code&gt;. С другой стороны, на V8 уменьшив объем данных в 10 раз получаю ускорение в 20 раз, до 0.8ms. Что нам это говорит? Видимо то что emscripten и движки JS пока далеки от генерации чего-то похожего на нативный код. Думаю что &lt;code&gt;memcpy&lt;/code&gt; реализован циклом по массиву HEAP&amp;hellip; Или чота типа того. Safari как всегда впереди всех - 14.7ms но тоже не торт. Возможно корень зла в emscripten и webassembly отожгет.&lt;/p&gt;

&lt;p&gt;Ладно, хер с ним переживать - все это можно оптимизировать в разы. Продолжу с сутью и давайте попробуем выбрать все запросы где &lt;code&gt;Waiting == true&lt;/code&gt;. Для этого добавлю AVE индекс: &lt;code&gt;var monster = newDB([sizeof E, sizeof A, -1], [Order(0x123), Order(0x231)])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ха-ха-Ха ебать, и вот она - пизда! 10ms на итерацию в нативном коде. Ну конечно, идентификаторы триплов я генерировал последовательно, и они (триплы) добавлялись в конец, а с индексом понеслась пизда по кочкам, все таки структура данных (тупо массив) - откровенное гавно, но это меня не остановит.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Nimrod&#34; data-lang=&#34;Nimrod&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;monster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Waiting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?e&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prepare&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ОК, соснул, построились кривые итераторы не из того места&amp;hellip; Починил, включая поддержку 32 бит. Осталось поправить багу (iter.up/iter.open должен перематывать итератор в начало), но бага мешает толко для &amp;ldquo;плохих&amp;rdquo; планов (так то нехуй ничо перематывать).&lt;/p&gt;

&lt;p&gt;А вот с запросами двигло работет побыстрее. Поиск монстробаз где &lt;code&gt;Waiting == true&lt;/code&gt; &amp;ndash; &lt;code&gt;5.5ms&lt;/code&gt; на V8:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Nimrod&#34; data-lang=&#34;Nimrod&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;monster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?q&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Waiting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;monster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?db&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Queries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?q&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;monster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?db&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DatabaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;?name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prepare&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;На сегодня с программированием завязал, надо подумать что со всем этим делать дальше. Код под тегом &lt;code&gt;day-170104&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leapfrog Triejoin</title>
      <link>https://platoff.github.io/blog/leapfrog-triejoin/</link>
      <pubDate>Tue, 03 Jan 2017 15:51:49 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/leapfrog-triejoin/</guid>
      <description>&lt;p&gt;Итак, &lt;a href=&#34;https://platoff.github.io/blog/%D0%B7%D0%B0%D1%85%D0%BE%D0%B6%D1%83-%D1%81-%D0%B4%D1%80%D1%83%D0%B3%D0%BE%D0%B9-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D1%8B/&#34;&gt;из вчерашнего&lt;/a&gt; мы узнали, что сердце моего движка запросов - &lt;a href=&#34;https://arxiv.org/abs/1210.0481&#34;&gt;Leapfrog Triejoin&lt;/a&gt; алгоритм. Надо закончить с выбором плана и построением соответствующих итераторов.&lt;/p&gt;

&lt;p&gt;В общем, после всей ебаты на 300 строк, оно заработало. Сам join проще простого:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Nimrod&#34; data-lang=&#34;Nimrod&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TrieJoin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TrieIter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;joinOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leapfrog&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leapfrog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;lt;- &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leapfrog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;joinOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;leapfrog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;up&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;joinOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Результат под тегом &lt;a href=&#34;https://github.com/platoff/wafer/tree/day-170103&#34;&gt;&lt;code&gt;day-170103&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Захожу с другой стороны</title>
      <link>https://platoff.github.io/blog/%D0%B7%D0%B0%D1%85%D0%BE%D0%B6%D1%83-%D1%81-%D0%B4%D1%80%D1%83%D0%B3%D0%BE%D0%B9-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D1%8B/</link>
      <pubDate>Mon, 02 Jan 2017 10:19:40 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%B7%D0%B0%D1%85%D0%BE%D0%B6%D1%83-%D1%81-%D0%B4%D1%80%D1%83%D0%B3%D0%BE%D0%B9-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D1%8B/</guid>
      <description>

&lt;p&gt;Итак, 2 января 2017го. Декабрьская поездка в Прагу и Новосибирск поломала только начинавшеюся практику ежедневного программирования, суета конца года в бизнесе усугубила, но пару дней в конце года я уделил для кода.&lt;/p&gt;

&lt;p&gt;Что я имею: какой то жалкий прототип dom diff &amp;ndash; это даже нельзя назвать virtual dom, поскольку DOM как таковой у меня отсутствует (даже виртуальный). Чтобы двинуться дальше надо увидеть всю картину, поэтому я зайду с другой стороны - со стороны модели.&lt;/p&gt;

&lt;p&gt;Я - старый фанат &lt;a href=&#34;http://www.datomic.com&#34;&gt;datomic&lt;/a&gt;. Настолько старый, что вы не поверите, но что не удивительно, учитывая мой вечный, берущий начало в прошлом веке интерес к архтектурам БД, и чему есть &lt;a href=&#34;https://twitter.com/platoff/statuses/281250841401389056&#34;&gt;документальные подтверждения из 2012-го&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Несколько лет назад &lt;a href=&#34;http://tonsky.me&#34;&gt;Никита Прокопов&lt;/a&gt; сделал довольно известное в некоторых кругах архитектурное подобие Datomic под названием &lt;a href=&#34;https://github.com/tonsky/datascript&#34;&gt;DataScript&lt;/a&gt;, а буквально месяц назад кто-то твитнул о том что Mozilla тоже делает нечно похожее. Вот оно: &lt;a href=&#34;https://github.com/mozilla/datomish&#34;&gt;Datomish&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В каком направлении идет Mozilla я не смотрел, но пару лет назад встречался с Никитой и говорил что для платформы моей мечты я хочу сделать полноценный datomic на стороне браузера. Тогда Никита сказал что это пиздец и на такое не готов сам Rich Hickey (не знаю поменял Никита свою точку зрения к этому моменту или нет), но тогда он подкинул мне интересных ребят, и хоть я на них уже натыкался, ребят стоит читать и внимательно смотреть - они очень интересные, спасибо Никите. Вот ребята: &lt;a href=&#34;http://witheve.com&#34;&gt;Eve: Programming designed for humans&lt;/a&gt;&amp;hellip; Нашел письмо от Никиты, встречались мы в октябре 2014го.&lt;/p&gt;

&lt;p&gt;В общем я не буду ждать ни Никиту ни Mozilla, а просто попытаюсь сделать для себя полноценный Datomic-alike database, с клиентом (peer, в терминологии datomic) на стороне браузера. Задача эта интересна еще и тем, что с 2000-х годов в мире возникло столько структур данных и алгоритмов, что прям крышу сносит. Это в основном succint и cache-oblivious data structures, который интересно было бы с большой пользой применить в БД.&lt;/p&gt;

&lt;p&gt;Но начну я с очень простой, скажем так, схематичной реализации хранилища и выполнения запросов.&lt;/p&gt;

&lt;h1 id=&#34;прототип&#34;&gt;Прототип&lt;/h1&gt;

&lt;p&gt;В моем прототипе основная часть &amp;ndash; это выполнение запросов. В своей прошлой жизни я никогда до этого момента не доходил (выполнение любого запроса от пользователя). Ибо, если ты делаешь какое то свое хранилище вместо БД общего назначения &amp;ndash; то оно &lt;em&gt;специализированное&lt;/em&gt; под конкретную задачу. Это имеет смысл, поскольку в этом случае ты имеешь шанс уделать любую базу данных общего назначения (по памяти, производительности и т.д.). Это предполагает и выполнение конкретных запросов супротив оптимизированной структуры.&lt;/p&gt;

&lt;p&gt;Но жизнь показывает, что большинство программистов мыслят стереотипом: если есть данные и есть запросы к данным надо взять БД. Вы не поверите насколько много программистов так мыслят, и даже очень хороших. Работал у нас один мужчина - очень неплохой, и в какой-то момент он занимался эксклюзивно &lt;a href=&#34;http://eclipse.org/dltk&#34;&gt;DLTK&lt;/a&gt;. DLTK это грубо говоря средство разработки, а в средстве разработке задача поиска разнообразной информации - вещь необходимая. Так вот: этот программист всандалил туда &lt;a href=&#34;http://www.h2database.com/html/main.html&#34;&gt;H2 Database&lt;/a&gt;, чем вызвал мое полное недоумение и неприязнь.&lt;/p&gt;

&lt;p&gt;Ладно бы он засунул какую-нить BerkeleyDB, но полнценную, реляционную БД с SQL фронт-эндом &amp;ndash; это полный пиздец. А больший пиздец в том, что это &lt;a href=&#34;http://spektom.blogspot.fr/2009/07/new-dltk-indexing-is-promising.html&#34;&gt;мало кого удивило&lt;/a&gt; за исключением реально думащих чуваков, как, например известный в мире PHP Seva (Wsevolod) Lapsha, который буквально снял мои слова с языка:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As I already mentioned, you would probably like to try the Berkeley DB. I assume you do not use non-trivial table joints and filtering, in the queries, so seemless Map interface provided by Berkeley would be easier to use. Also the statement parsing, compilation and optimization is told to be a certain overhead.
Anyway, it would be interesting to perform a clean performance comparison between H2 and B., since I did not found an existing one over the Internets.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Я не знаю выпилили ли они H2 из DLTK на данный момент (хоть я вроде и оставался формальным Project Lead этого проекта долгое время), но беглый поиск по сети говорит что &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=454867&#34;&gt;еблись ребята долго&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Но мы не ищем легких путей (сарказм), хотя можно было бы сейчас скомпилячить &lt;code&gt;sqllite&lt;/code&gt; emscripten-ом и подрачить на то, что у меня уже есть БД в браузере, рассазать вам что у меня есть реляционная &amp;ldquo;альтернатива&amp;rdquo; datomic, настроить хуеты вокруг и жидко обосраться в конце.&lt;/p&gt;

&lt;h1 id=&#34;что-есть-на-данный-момент&#34;&gt;Что есть на данный момент&lt;/h1&gt;

&lt;p&gt;Практически нихуя. Как я писал выше, моя первая задача - выполнить запрос. В архитектуре datomic любой запрос - это большое количество джойнов, про архитектуру, если не хотите рыться в сети можно почитать выжимку у Никиты: &lt;a href=&#34;http://tonsky.me/blog/unofficial-guide-to-datomic-internals/&#34;&gt;Unofficial guide to Datomic internals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Поскольку я интересуюсь БД давно то есть у меня в загашнике знание об одном замечательном алгоритме, который называется &lt;a href=&#34;https://arxiv.org/abs/1210.0481&#34;&gt;Leapfrog Triejoin&lt;/a&gt;. Его я и попользую, поскольку 1) реализация алгоритма тривиальна 2) есть подозрение что он будет работать быстрее чем у Никиты, а у него в DataScript, как я понимаю из &lt;a href=&#34;http://tonsky.me/blog/datascript-internals/&#34;&gt;A shallow dive into DataScript internals&lt;/a&gt; Hash Join.&lt;/p&gt;

&lt;h1 id=&#34;новый-репозиторий&#34;&gt;Новый репозиторий&lt;/h1&gt;

&lt;p&gt;Самое время во второй день нового года сделать новую репу, и залить туда всю гавнину. Тем более что старая &lt;a href=&#34;https://github.com/platoff/faxma&#34;&gt;faxma&lt;/a&gt; уже неактуальна ни своим названием ни сутью (&lt;a href=&#34;https://platoff.github.io/blog/virtual-dom-%D0%B4%D0%B5%D0%BD%D1%8C-2/&#34;&gt;объясняю почему я - дебил&lt;/a&gt;). Встречаем свежак: &lt;a href=&#34;https://github.com/platoff/wafer&#34;&gt;https://github.com/platoff/wafer&lt;/a&gt;. Web Application Framework (Elegant and Reactive).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;leapfrog.nim&lt;/code&gt; реализация Leapfrog Triejoin. &lt;code&gt;rel.nim&lt;/code&gt; простое хранилище отношений. Отношение это набор tuples вида &lt;code&gt;[a b c ...]&lt;/code&gt;, и я предполгаю что все переменные в тупле фиксированной длинны, за исключением одной, которая может быть переменной длинны (этого допущения мне явно не хватит, но пусть пока так).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;db.nim&lt;/code&gt; &amp;ndash; не законченная реализация запросов (из данных, лежащих в rel с помощью leapfrog). Поскольку leapfrog все за меня делает, мне остается лишь построить какой-то план выполнения запроса, итераторы соответствующие этому плану и отдать все это дело в leapfrog. План запроса - не что иное как порядок вычисления переменных участвующих в запросе. Я мог бы сейчас взять их в любом порядке, но хочется посмотреть как согласуются части программы, поэтому я все же делаю какой-то алгоритм выбора эффективного плана (который, в силу своей примитивности, легко сможет &amp;ldquo;выбрать&amp;rdquo; хуевый план).&lt;/p&gt;

&lt;h1 id=&#34;хуярю&#34;&gt;Хуярю&lt;/h1&gt;

&lt;p&gt;Надо доделать сам join, сейчас у меня есть только план выполнения запроса. Но перед этим надо навести порядок с ебучей матрицей, которая у меня вдруг возникла. Последний раз я матрицу пользовал в школе, когда программировал пиксельную графику (и не для аффинных преобразований &amp;ndash; я про них не знал ни тогда ни сейчас), а для того чтобы хранить пиксели. А из университета меня выгнали, так что матрицы я не программировал, и всегда считал что для программиста достаточно одномерного массива. Но все же в данном месте мне очень хочется ее засунуть.&lt;/p&gt;

&lt;p&gt;&amp;hellip;В общем хер с ним &amp;ndash; делать полноценное построение всех планов это подзаебаться, завтра сделаю чтобы работало в моих частных случаях. &lt;a href=&#34;https://github.com/platoff/wafer/commit/4bd155da9c37fa54cfeaad4ac5dce8d97d821371&#34;&gt;Коммит&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Про софтваре чуваков и проблемы реального мира</title>
      <link>https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE-%D1%81%D0%BE%D1%84%D1%82%D0%B2%D0%B0%D1%80%D0%B5-%D1%87%D1%83%D0%B2%D0%B0%D0%BA%D0%BE%D0%B2-%D0%B8-%D0%BF%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D1%8B-%D1%80%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BC%D0%B8%D1%80%D0%B0/</link>
      <pubDate>Sun, 01 Jan 2017 14:15:35 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE-%D1%81%D0%BE%D1%84%D1%82%D0%B2%D0%B0%D1%80%D0%B5-%D1%87%D1%83%D0%B2%D0%B0%D0%BA%D0%BE%D0%B2-%D0%B8-%D0%BF%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D1%8B-%D1%80%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BC%D0%B8%D1%80%D0%B0/</guid>
      <description>

&lt;p&gt;Здравствуй 2017, и мой анонимный читатель с псевдонимом George. Я еще никому не сказал про этот блог, но George его уже как-то нарыл, что приятно.&lt;/p&gt;

&lt;p&gt;Наверное в первый день нового года стоит написать о том, что я планирую сделать в этом году. Поддамся стереотипам и попробую. Сделать это будет несколько сложно, ведь суть этого блога &amp;ndash; показать ход мысли. Не только что я делаю/хочу/&amp;hellip;, а как я дошел до это, в том числе через огромное количество ошибок. Для этого придется дампить некоторое содержимое из башки в текст, свзяать же все в одну кучу в тексте будет стоить много времени, но думаю, что к концу года все свяжется.&lt;/p&gt;

&lt;p&gt;Начну издалека, и параллельно выдам себе комплиментов:&lt;/p&gt;

&lt;h1 id=&#34;про-софтваре-чуваков-и-решение-проблем&#34;&gt;Про софтваре-чуваков и решение проблем&lt;/h1&gt;

&lt;p&gt;Я можно сказать с рождения был software-чувак. Сходу я не смог найти оригинальны пост про то, что я имею ввиду под софтваре-чуваком, но если кратко, то софтваре-чел &amp;ndash; это чел, который видя какую-либо проблему в реальном мире, пытается решить ее в софте. Пытается - это не значит что он садится за компьютер и напрягается, я про способ мышления - есть проблема, есть фантазии на тему решения проблемы с помощью &amp;ndash;зонта&amp;ndash; софта.&lt;/p&gt;

&lt;p&gt;Если порытся в сети, можно найти разнобразные проекции этой мысли, например вот здесь: &lt;a href=&#34;http://codemanship.co.uk/parlezuml/blog/?sectionid=39&#34;&gt;The Best Software Developers Know It&amp;rsquo;s Not All &amp;lsquo;Hacking&amp;rsquo;&lt;/a&gt; это первое попавшееся, но от себя я сразу уточню что быть софтваре-чуваком - это необходимое, но не достаточное условие для того, чтобы быть Best Software Developer.&lt;/p&gt;

&lt;p&gt;Решать реальные проблемы с помощью софта - это не сначит делать софт самому, большая часть проблем решается сущуствующими инструментами. Будучи и программистом и софтваре чуваком, существенная часть реальных проблем, с которыми я встречался в жизни были связаны, как это не удивительно (сарказм), с программированием, и разработкой ПО.&lt;/p&gt;

&lt;p&gt;Первая очевидная мне проблема встала в моей первой команде (в году так 1995, мне тогда было 19 лет) - проблема версионинга исходных файлов, и проблема &amp;ldquo;учета проблем&amp;rdquo; :). Смешно это писать в первый день 2017 года, когда даже начинающий программист удивится: ведь есть куча инструментов версионинга, и баг трекеры. Но гораздо смешнее то, что и в далеком 1995 годе большинство программистов жили без версионинга и багтрекинга и &lt;em&gt;проблемы не видели&lt;/em&gt;. Перед ними стояли &lt;em&gt;задачи&lt;/em&gt; синхронизировать кодебазу, которую они успешно решали передачей файлов на дискетах, через файловый сервер (у кого была локальная сеть), или самые продвинутые через электронную почту (у кого была и локальный сервер был не доступен). Вышак был воздвигнуть FTP.&lt;/p&gt;

&lt;p&gt;Блять! Я вам скажу 95% программистов считало что таскать файлы на дискете - это &lt;em&gt;нормально&lt;/em&gt;. Что у них &lt;em&gt;нет проблем&lt;/em&gt;. Для учета проблем в самых продвинутых и жестких организциях была тетрадка учета проблем, а наиболее компьютеризированные (и имеющие локальные сети) записывали проблемы в текстовом (или вордовом!) файле (тем самым &lt;em&gt;усугубляя&lt;/em&gt; проблему версионирования. Так делали не только в отсталой России, но и во всем мире.&lt;/p&gt;

&lt;p&gt;Ребята, еб вашу мать! Так быть не должно, вы же понимаете что это пиздец, вы понимаете что вы теряетесь в версиях ваших файлов, вы понимаете, что вы тратите безумное количество времени чтобы синхронизироваться и огромное количество ошибок мы ловим потоуму что кто-то что-то собрал хуй пойми их каких версий, непонятно откудо взятых файлов??? (а это случалось постоянно). Но восклицать было бесполезно. 19 из 20 программистов смотрели на тебя как на долбоеба, типа что-ты тут орешь &amp;ndash; такова жизнь и все так делают &amp;ndash; разработка ПО - это боль.&lt;/p&gt;

&lt;p&gt;Тогда, более 20 лет назад, я понял что программист != софтваре-чел. Это разные, случайно пересекающиеся множества. Большинство программистов &lt;em&gt;не видят проблем&lt;/em&gt;, там где они есть. Они не видят проблем даже в том, чем непосредственно занимаются. Точно так же они не видят проблем ни в своих решениях, ни в той области в которую они призваны (наняты) решать проблемы.&lt;/p&gt;

&lt;p&gt;Но мне то, как софтваре-челу проблема была очевидна, и я начал искать. В те времена я не думал что пацан из Сибири имеет право сам решать мировые проблемы, и я просто искал решение. На компакт дисках, устанавливая горы шлака имеющее хоть какое-то отношение к разработке, в интернете (на скоросте 500 байт в секунду), и эй! Google в то время отсутствовал, не думайте что найти что-либо релевантное в сети тогда было так просто.&lt;/p&gt;

&lt;p&gt;И вот оно, оказалось под носом. Только что вышедший Delphi Client/Server версии 2.0 включал в себя некий комонент под названием PVCS. Как эта хуета работала и как ей пользоваться было решительно непонятно - я вам скажу этот PVCS был еще тот пиздец, но я радовался безумно: оказалось что я не один ебанутый, а есть люди, которые понимают проблему, и даже предлагают решения.&lt;/p&gt;

&lt;p&gt;Для молодежи скажу что тогда, естественно, не было никакого git, и даже SVN. Уже был CVS: &lt;em&gt;On November 19, 1990, CVS version 1.0 was submitted to the Free Software Foundation for development and distribution&lt;/em&gt;, но я его успешно пропустил - у меня не было машины с юниксом - сеть наша бегала на Novell Netware, и мой поиск к сожалению был нацелен на винду. Кстати, как бы там не было - CVS в то время был свежак - прям хипстерская технология не для масс. Хер его знает в каком он был состоянии в 1995 (активно пользовать сам я его начал примерно в 2002), так вот тогда SVN которому уже было пару лет отроду был полный пиздец, пользовать его можно было начинать только после 2006 - а там уже git подтягивался.&lt;/p&gt;

&lt;p&gt;Long story short, я наконец нашел его: &lt;a href=&#34;https://en.wikipedia.org/wiki/StarTeam&#34;&gt;StarTeam&lt;/a&gt; от компании StarBase, чуть ли ни бету версии 2.0, то ли на треш-CD куда сливали весь warez мира без разбору и продавали в ларьках за деньги, толи еще где. Это была песня. Это был кайф, и не только versioning файлов, но и интегрированный баг-трекер. Чуть позже мы нарыли StarTeam Server и просидели на этом волшебном продукте до того как команда наебнулась в самом начале 1999.&lt;/p&gt;

&lt;p&gt;Тогда я, кстати, думал что Borland - дураки, и должны были купить StarTeam, что они, кстати и сделали в 2003-м. Borland вообще единственная контора на моей памяти, покупки которой согласовались с моим наивным представлением о том, кто и что должен купить. В какой то момент смотря на уебищный Midas от Borland (такое же уебанство как PVCS), разочарованно думал, еб вашу мать, зачем вам это гавно - есть же прекрасный VisiORB. И Borland покупает VisiGenic. Наивный я был конечно в том, что думал компании и продукты покупаются чтобы сделать свою линейку еще более удобной и привлекательной для пользователя, но, во-первых и зачастую это не так, а во-вторых, даже когда это так - топ-менеджмент компаний нихуя не понимает в том, что на самом деле надо людям.&lt;/p&gt;

&lt;p&gt;В 1999 я пришел в небезызвестный Novosoft. Я был 105-й, а через год там работало что-то около 500 человек. Так вот, большинство этих программистов не пользовалость ни version control, ни багтрекерами, и не парились по этому поводу. Были люди, которые прям насаждали CVS или StarTeam в отдельно взятых командах, но багтрекерами большинство так и не воспользовалось (Jira кстати тогда тоже не было), про Wiki даже не говорите, и хоть Ward Cunningham уже сделал WikiWikiWeb - знали о значении этого слова их четырех букв только избранные.&lt;/p&gt;

&lt;p&gt;Хехе CruiseControl я тоже пользовал - но это уже лишнее для данного поста.&lt;/p&gt;

&lt;h1 id=&#34;резумируя&#34;&gt;Резумируя&lt;/h1&gt;

&lt;p&gt;Большинство диалогов начинающихся с фразы: &amp;ldquo;ты же программист, реши нам проблему (сделай софт)&amp;rdquo; заканчивается &lt;em&gt;двумя&lt;/em&gt; проблемами: оригинальной проблемой, которая до сих пор нормально не решена и тем решением, с которым как то приходится жить и мириться. Это происходит потому что mindset большинства программистов (как впрочем и непрограммистов) не заточен на решение real-world пробелем. Они не видят проблем (да же тех, которые у них перед носом) и так же не видят решений.&lt;/p&gt;

&lt;p&gt;То есть если им объяснить проблему (показать) - они смогут &lt;em&gt;придумать&lt;/em&gt; некоторое решение, которое будет далеко не идеальным. У меня нет объяснения почему так, но я думаю объяснение лежит в области слепоты: человек не &lt;em&gt;видящий&lt;/em&gt; проблему не может &lt;em&gt;увидеть&lt;/em&gt; решение. Тут важно заметить что я говорю не про знание а про видение: даже самый глазастый визионер не будучи &lt;em&gt;знаком&lt;/em&gt; с предметом никаих проблем там не увидит. Речь идет о том когда человек знаком с проблемным предметом.&lt;/p&gt;

&lt;p&gt;В общем так, ребятишки - если бы вас научили программированию где-нибудь на необитаемых островах и заставили писать софт, то только на одном из 20 таких островов нашлись бы люди, которые сделали бы себе систему контороля версий и прочее, остальные бы херачили как получится. Я это видел - и это медицинский факт.&lt;/p&gt;

&lt;p&gt;Что интересно, если бы вас научили программировать на ассемблере и оставили на острове, то только на одном из 20 появилось бы некоторое подобие Си. Остальные так бы и херачили на ассемблере, &lt;em&gt;не видя в этом никаких проблем&lt;/em&gt;. Я привожу примеры из области программирования только потому что блог как бы про программирование, к сожалению (или к счастью) то же самое верно для любой области деятельности и в любом разрезе.&lt;/p&gt;

&lt;p&gt;На сегодня хватит писанины, надо бы еще попрограммировать. Завтра продожу подводить к планам на 2017, и после этого расскажу что там с программированием. Последние несколько дней 2016 я чо то поделал, и сейчас буду продолжать.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Прошел месяц</title>
      <link>https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE%D1%88%D0%B5%D0%BB-%D0%BC%D0%B5%D1%81%D1%8F%D1%86/</link>
      <pubDate>Mon, 19 Dec 2016 10:12:21 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%BF%D1%80%D0%BE%D1%88%D0%B5%D0%BB-%D0%BC%D0%B5%D1%81%D1%8F%D1%86/</guid>
      <description>

&lt;p&gt;Прошел месяц с моего решения ежедневно программировать и так же ежедневно писать. В результате я програмиировал 4.5 дня. Писал немного чаще, но в основном в чукотском стиле (что вижу - то пою). А это уже некоторые цифирки, помогающие мне понять чем я на самом деле занимаюсь, и в какую из труб вылетает все мое время.&lt;/p&gt;

&lt;h2 id=&#34;заканчиваю-с-dbmonster&#34;&gt;Заканчиваю с dbmonster&lt;/h2&gt;

&lt;p&gt;Прежде чем идти дальше, приду к какому-то законченному варианту с dbmonster. Мне не нравится что выглядит он не так, как остальные dbmonster в сети: толи я накосячил со стилями, то-ли в html, непорядок. Попробую найти проблему.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ебать же в сраку вашу мать&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Сравнил все что мог, мистика, HTML и CSS идентичны, но у чувачков размер фонта поменьше и количество запросов выровнено по вертикали, в отличии от меня. Ебана в рот, оказывается дело в том что у меня нет вот этой прекрасной директивы &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;, которая, кто бы мог подумать, имеет значение.&lt;/p&gt;

&lt;p&gt;Определенно, Web продвинулся очень далеко с 1999 года, и мне придется многое изучить, ну а мой dbmonster теперь выглядит как все.&lt;/p&gt;

&lt;h2 id=&#34;заканчиваю-с-dom-diff&#34;&gt;Заканчиваю с DOM diff&lt;/h2&gt;

&lt;p&gt;В общем DOM diff вещь, которая безусловно пригодится но я пока не вижу всей картины. Как должно выглядить полноценное приложение мне совсем не понятно. Как я буду управлять состоянием, на чем буду писать презентацию и ее логику? Будет ли это Nim или собственный язык (если так то будет это компилятор или интерпретатор на Nim). Язык общего назначения или &amp;ldquo;шаблоны&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;Чтобы закончить на позитивной ноте, решил еще померять скорость того, что есть. Имеется ввиду полный цикл (построение модели, рендер в HTML, diff с предыдущей и применение diff к DOM браузера). Основная просадка по времени была не у меня а в 2-х местах
* Реализация random в Nim модуле random жутко медленная. Заменил на модуль mersenne.
* Форматирование при выводе float в строку так же съедает большую часть времени, заменил на int в модели.&lt;/p&gt;

&lt;p&gt;После этих двух нехитрых изменений:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Нативно: Render: 0.3ms, Diff: 0.35ms, Model + Render + Diff: &lt;strong&gt;1ms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;V8 (node.js v4.1.1): Render: 1.2ms, Diff: 1.8ms, Model + Render + Diff: &lt;strong&gt;4.3ms&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Качнул свежак node - v7.3.0, в душе не ебу как у них с версиями и старая ли моя 4.1.1.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;V8 (node.js v7.3.0): Model + Render + Diff: &lt;strong&gt;4.8ms&lt;/strong&gt; - эта гавнина еще медленнее, похоже я не умею ее готовить&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Нашел гарную тему: &lt;code&gt;node --v8-options&lt;/code&gt;, включаю некий TurboFan &lt;code&gt;--turbo&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;V8 (node.js v7.3.0): Model + Render + Diff: &lt;strong&gt;6.2ms&lt;/strong&gt; начинаю ржать :).&lt;/li&gt;
&lt;li&gt;V8 (node.js v7.3.0 &amp;ndash;turbo_asm): Model + Render + Diff: &lt;strong&gt;4.3ms&lt;/strong&gt; походу эта муля была включена в 4.1.1 по умолчанию.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В общем с настройками V8 интересно баловаться, но оставлю на потом.&lt;/p&gt;

&lt;h2 id=&#34;посмотреть&#34;&gt;Посмотреть&lt;/h2&gt;

&lt;p&gt;Потыкать в dbmonster (200 строк) можно здесь: &lt;a href=&#34;https://platoff.github.io/dbmonster/200/dbmonster.html&#34;&gt;https://platoff.github.io/dbmonster/200/dbmonster.html&lt;/a&gt;. Постмотреть как оно должно быть (с точки зрения производительности) можно здесь: &lt;a href=&#34;https://platoff.github.io/dbmonster/20/dbmonster.html&#34;&gt;https://platoff.github.io/dbmonster/20/dbmonster.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Код здесь: &lt;a href=&#34;https://github.com/platoff/faxma/tree/day-161219&#34;&gt;https://github.com/platoff/faxma/tree/day-161219&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Выхожу из тени</title>
      <link>https://platoff.github.io/blog/%D0%B2%D1%8B%D1%85%D0%BE%D0%B6%D1%83-%D0%B8%D0%B7-%D1%82%D0%B5%D0%BD%D0%B8/</link>
      <pubDate>Wed, 14 Dec 2016 12:12:47 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%B2%D1%8B%D1%85%D0%BE%D0%B6%D1%83-%D0%B8%D0%B7-%D1%82%D0%B5%D0%BD%D0%B8/</guid>
      <description>&lt;p&gt;Если вы это читаете, то да, этот блог вышел в сеть. Большую часть дня я потратил на поиск движка для блога. Остановился на &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;, поиск &amp;ldquo;темы&amp;rdquo;, ее подхачивание, редактирование и форматирование контента, выкладывание сайта и артефактов от предыдущих постов.&lt;/p&gt;

&lt;p&gt;Такой день&amp;hellip; Завтра с утра бюрократия, но вторую половину дня надеюсь посвятить программированию.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Рекрутер</title>
      <link>https://platoff.github.io/blog/%D1%80%D0%B5%D0%BA%D1%80%D1%83%D1%82%D0%B5%D1%80/</link>
      <pubDate>Tue, 13 Dec 2016 18:17:52 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D1%80%D0%B5%D0%BA%D1%80%D1%83%D1%82%D0%B5%D1%80/</guid>
      <description>&lt;p&gt;Сегодня не программировал, но день прошел не без мелких программистских &amp;ldquo;радостей&amp;rdquo;. Рекрутеры не контачили со мной много лет. Я думаю это потому, что мой GitHub пуст, а в резюме нет интересующих их слов типа JavaScript. Но стоило мне начать программировать, какая-то особо чувствительная особа унюхала свежее мясо и доебалась.&lt;/p&gt;

&lt;p&gt;Я честно говоря был рад: ведь общение с рекрутером &amp;ndash; это уже признак того, что я становлюсь интересен как программист. Уверен, что для практикующих программистов такие диалоги &amp;ndash; рутина, но для меня &amp;ndash; нечто новое. Вот что получилось:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ndash; Андрей, добрый день. Спешно ищем Лида в Webgames. Давайте пообщаемся?&lt;br /&gt;
&amp;ndash; Давайте пообщаемся&lt;br /&gt;
&amp;ndash; Давайте ))&lt;br /&gt;
&amp;ndash; Начинайте&lt;br /&gt;
&amp;ndash; Андрей, добрый день. Что скажете про описание? Разработку игр и Godot?&lt;br /&gt;
&amp;ndash; Godot - отличная вещь, слежу за ним уже пару лет. Что вам интересно про описание? Описание достойное, не хватает пункта о компенсации&lt;br /&gt;
&amp;ndash; Вы занимаетесь разработкой игр сейчас ?&lt;br /&gt;
&amp;ndash; Ага&lt;br /&gt;
&amp;ndash; Компенсацию готовы обсуждать, тут сложно сказать точную ставку&lt;br /&gt;
&amp;ndash; А в чем сложность?&lt;br /&gt;
&amp;ndash; Зависит от кандидата, явно человек не будет рассматривать уровень меньше, чем сейчас. Есть ли у вас резюме? Или где-то информация о вас?&lt;br /&gt;
&amp;ndash; Конечно есть &lt;a href=&#34;https://lmgtfy.com/?q=андрей+платов&#34;&gt;https://lmgtfy.com/?q=андрей+платов&lt;/a&gt; а почему вы думаете что человек не будет рассматривать уровень меньше чем сейчас? это очень частый случай. Нашли резюме?&lt;br /&gt;
&amp;ndash; Неа, поможите)))&lt;br /&gt;
&amp;ndash; Как не нашли? а что google выдает? И я использую ненормативную лексику, это проблема?&lt;br /&gt;
&amp;ndash; Нет)))) Главное Любовь к годот )))&lt;br /&gt;
&amp;ndash; так и какие действия? резюме не нашли? годот - молодцы, хорошие ребята, не скажу что у меня к ним любовь, скорее уважение&lt;br /&gt;
&amp;ndash; Не, линкедин не открывается( закрыли его. Надо искать через что открыть&lt;br /&gt;
&amp;ndash; А, забыл что закрыли, а как же вы людей-то ищете без linkedin? получается? Слушайте, а что, в Москву надо переезжать, чтобы с вами работать?&lt;br /&gt;
&amp;ndash; А где вы?&lt;br /&gt;
&amp;ndash; я во Франции&lt;br /&gt;
&amp;ndash; Да, надо. Вы не поедете 😂&lt;br /&gt;
&amp;ndash; почему вы так уверены? вы же обратились ко мне, значит какое-то уникальное предложение. Я конечно Москву не терплю но ради интересного дела могу потерпеть&lt;br /&gt;
&amp;ndash; ))))) серьёзно ? Мне кажется, место жительство это важный аспект, тем более это же не из Нижнего Новгорода в Москву, а почти наоборот 😂&lt;br /&gt;
&amp;ndash; Ну я же езжу в Новосибирск, и надолго - у нас там главный офис. В Москве тоже провожу около месяца в году, хоть и не люблю ее. Дело то важнее, так же?&lt;br /&gt;
&amp;ndash; Да) хорошо, я открою ваш профиль через Линк, отправлю нашему технич гуру )&lt;br /&gt;
&amp;ndash; А он точно гуру? Как зовут? Я в России всех гуру знаю, или слышал&lt;br /&gt;
&amp;ndash; Яша Боревич&lt;br /&gt;
&amp;ndash; Не слышал. Гляну сейчас. Понял. Чувак любитель годота &lt;a href=&#34;https://moikrug.ru/borevich-yakov&#34;&gt;https://moikrug.ru/borevich-yakov&lt;/a&gt;&lt;br /&gt;
&amp;ndash; Да ))) Но он уходит, ищем ему смену&lt;br /&gt;
&amp;ndash; Слушайте, а что он готов к предложениям за 200 тыщ? Может я его найму? Но я то за 200 тыщ не готов как он&lt;br /&gt;
&amp;ndash; А за сколько? И как вы к unity3d относитесь ?&lt;br /&gt;
&amp;ndash; Отрицательно. Скажу вам Unity гавно.&lt;br /&gt;
&amp;ndash; Хорошо, я вас поняла. У нас 2 позиции и ещё одна unity lead&lt;br /&gt;
&amp;ndash; На кой вам Юнити лид? Вы много игр делаете? Слушайте, а вот эти прекрасные отзывы - это правда? &lt;a href=&#34;http://job-interview.ru/company/review/4391&#34;&gt;http://job-interview.ru/company/review/4391&lt;/a&gt;&lt;br /&gt;
&amp;ndash; Это же все старьё. Старый HR&lt;br /&gt;
&amp;ndash; Ну а сейчас как дела? И причём здесь HR. Кидает то не HR. И что новый не подчистил интернет?&lt;br /&gt;
&amp;ndash; Все хорошо, не кидают никого&lt;br /&gt;
&amp;ndash; А чо Яша уходит? Денег мало или перспектив нет?&lt;br /&gt;
&amp;ndash; И то и то наверное, он давно работает. Я ищу для веб Геймс, не работаю у них в штате&lt;br /&gt;
&amp;ndash; то есть вы меня хотите продать вместо Яши, которому мало платят и у которого нет перспектив? Ладно, черт с ними, с зарплатой и перспективами. Так то мне 40 лет, не стар для программиста?&lt;br /&gt;
&amp;ndash; [тишина&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;В общем разговор не состоялся, где-то я накосячил и до офера не дошел. Но почувствовал себя востребованным программистом. Хотя&amp;hellip; может действительно возраст испугал. Завтра утром продолжу доказывать что в сорок лет не поздно начинать конкурировать с молодежью на их территории.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Russian Business</title>
      <link>https://platoff.github.io/blog/russian-business/</link>
      <pubDate>Mon, 12 Dec 2016 17:22:58 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/russian-business/</guid>
      <description>

&lt;p&gt;Тег &lt;code&gt;проебал&lt;/code&gt; не совсем верен. За последние две недели я проебал только программирование - с годами мне стало сложно переключаться, вернее невозможно. Впрочем, попробую научиться, дело в практике.&lt;/p&gt;

&lt;p&gt;Все дни был занят бытовухой в Праге и Новосибирске. Ребята молодцы! Юра К. для меня - открытие года. Прага вроде начала активный поиск сотрудников. Академовский офис переезжает в новое большое помещение (не помню размер, но что то около 1500 квадратов). Ну и не обошлось без трений с российским бизнесом.&lt;/p&gt;

&lt;h1 id=&#34;бессмысленный-и-беспощадный&#34;&gt;Бессмысленный и беспощадный&lt;/h1&gt;

&lt;p&gt;Сталкиваясь с &amp;ldquo;бессмысленным и беспощадным&amp;rdquo; российским бизнесом, сразу понимаешь: вот он, родимый. За редким исключением, российский бизнес, идущий на конфликт с желанием что-либо выторговать для себя, так же, как и российская внешняя политика, использует только два инструмента: &lt;code&gt;блеф&lt;/code&gt; и &lt;code&gt;шантаж&lt;/code&gt;. Обычно в паре, поскольку шантаж без блефа это сложно.&lt;/p&gt;

&lt;p&gt;Пиздеть они могут на любую тему, и как правило, все, что они очень убедительно излагают, не соответствует действительности. &amp;ldquo;Факты&amp;rdquo; на которые они опираются не существуют в природе, а законы, на которые ссылаются, говорят обратное.&lt;/p&gt;

&lt;p&gt;По возможности избегайте, но встретившись - поймите где блеф, выкиньте его из поля зрения, и пошлите товарищей нахуй.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Посмотреть на Монстра</title>
      <link>https://platoff.github.io/blog/%D0%BF%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80%D0%B5%D1%82%D1%8C-%D0%BD%D0%B0-%D0%BC%D0%BE%D0%BD%D1%81%D1%82%D1%80%D0%B0/</link>
      <pubDate>Sun, 27 Nov 2016 12:43:21 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%BF%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80%D0%B5%D1%82%D1%8C-%D0%BD%D0%B0-%D0%BC%D0%BE%D0%BD%D1%81%D1%82%D1%80%D0%B0/</guid>
      <description>

&lt;p&gt;Сегодня хочу получить полноценный dbmonster - с бегущими циферками по экрану. До текущего момента я генерировал экраны в цикле, не передавая управление браузеру, и это надо исправить. Для этого мне надо по-честному воткнуться в message loop. Замечательный emscripten все сделал, пользую &lt;code&gt;emscripten_set_main_loop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Итак, все оказалось очень просто:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Nimrod&#34; data-lang=&#34;Nimrod&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cdecl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  
  &lt;span class=&#34;n&#34;&gt;JSrender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;emscripten_set_main_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Safari: 18-19 FPS. В разы медленнее inferno. Через некоторое время падает с out of memory - не мудрено, я же отключил GC. Для начала попробую как то врубить GC: безопасно это только в main loop, и добиться стабильности:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Nimrod&#34; data-lang=&#34;Nimrod&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;GC_enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;GC_disable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;17-18 FPS. Медленнее, чем большинство фреймворков. В Chrome вообще пиздец: 9-10 FPS. Утешаю себя тем, что я только начал и дело не в скорости, а в первую очередь в продуктивности и нежелании писать на JavaScript. Пока по всем параметрам я проигрываю.&lt;/p&gt;

&lt;h1 id=&#34;посмотреть-на-монстра&#34;&gt;Посмотреть на Монстра&lt;/h1&gt;

&lt;p&gt;Посмотреть на монстра в деле можно здесь: &lt;a href=&#34;https://platoff.github.io/dbmonster&#34;&gt;https://platoff.github.io/dbmonster&lt;/a&gt;.
Код под тегом &lt;code&gt;day-10&lt;/code&gt; &lt;a href=&#34;https://github.com/platoff/faxma/tree/day-10&#34;&gt;https://github.com/platoff/faxma/tree/day-10&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Уехал в Прагу</title>
      <link>https://platoff.github.io/blog/%D1%83%D0%B5%D1%85%D0%B0%D0%BB-%D0%B2-%D0%BF%D1%80%D0%B0%D0%B3%D1%83/</link>
      <pubDate>Sat, 26 Nov 2016 22:38:16 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D1%83%D0%B5%D1%85%D0%B0%D0%BB-%D0%B2-%D0%BF%D1%80%D0%B0%D0%B3%D1%83/</guid>
      <description>&lt;p&gt;Все таки вести этот журнал была хорошая идея &amp;ndash; сразу видно сколько дней я проебываю в никуда. В четверг улетел в Прагу. Пятница зашел в офис - поговорили с коллегами. Суббота &amp;ndash; тупо проебал, сходил пообедать, поужинать. Для моего программирования польза нулевая. Попробую что-нибудь сделать завтра.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пора запуститься в браузере</title>
      <link>https://platoff.github.io/blog/%D0%BF%D0%BE%D1%80%D0%B0-%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D1%82%D0%B8%D1%82%D1%8C%D1%81%D1%8F-%D0%B2-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B5/</link>
      <pubDate>Wed, 23 Nov 2016 11:30:59 +0100</pubDate>
      
      <guid>https://platoff.github.io/blog/%D0%BF%D0%BE%D1%80%D0%B0-%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D1%82%D0%B8%D1%82%D1%8C%D1%81%D1%8F-%D0%B2-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B5/</guid>
      <description>

&lt;p&gt;Сегодня, наконец, хочу увидеть что-нибудь в браузере.&lt;/p&gt;

&lt;h1 id=&#34;moй-первый-javascript&#34;&gt;Moй первый JavaScript&lt;/h1&gt;

&lt;p&gt;Для начала, могу сказать что я вообще не знаю как работают scopes в JavaScript (и моя предыдущая проблема с переменной цикла без var тому пример), я решил для начала вывести DOM в консоль, и для этого погуглил функцию вывода n пробелов (я уже веду себя как настоящий JS-разработчик, не начав программировать). Реализация вылезла следующая:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Тут я полностью охуел и понял, что JS-программистом мне не быть никогда. Я просто не смогу такое придумать - в прошлом я не протоптал ни одной тропинки в мозгу, которая могла бы привести к такому решению задачи. И, честно говоря, протаптывать такие тропинки (учиться) мне пока не хочется. Поэтому в пизду - будем сразу вываливать DOM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mergeInto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LibraryManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;$renderElement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;quot;DOCUMENT_ROOT&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;TEXT&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;h1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;hr&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;s2&#34;&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;li&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;section&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;span&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;tbody&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;td&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;TEXT&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;for&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;render DOCUMENT_ROOT&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createTextNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;error: DOCUMENT ROOT HERE&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//attrid == text&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createTextNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer_stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]));&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Pointer_stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          
          &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;renderElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;JSrender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello from emscripten: &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;childElementCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;renderElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;childElementCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;          
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;JSrender__deps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;$renderElement&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Я намеренно вываливаю DOM на экран лишь один раз - хочу замерить генерацию JS DOM off-screen. Ну что-ж: 18.5 ms на итерацию в Safari (это притом что asm.js часть справилась за 4.2ms). Chrome: хром вообще охуел от того что я ему сунул, пришлось считать на 250 итерациях - 75ms на итерацию. Это вообще ни в какие ворота, но как бы радует что asm.js часть все делает за 7.5ms.&lt;/p&gt;

&lt;p&gt;Из &amp;ldquo;тяжелого&amp;rdquo; у меня в цикле только &lt;code&gt;Pointer_stringify&lt;/code&gt;, который работает с UTF-8, пробую заменить на более быстрый &lt;code&gt;AsciiToString&lt;/code&gt;, что, впрочем не совсем верно, но надо посмотреть. Safari - 17.1ms. Выйграл миллисекунду, и понятно, что дело не в &amp;ldquo;математике&amp;rdquo;, а в большом количестве создаваемых и собираемых сборщиком мусора нод. Вот он корень зла, и подтверждение того, что вроде бы Virtual DOM - нужная вещь. Для проверки, отключил все операции с JS DOM - 6.9ms на итерацию.&lt;/p&gt;

&lt;p&gt;Ну что-ж остался основной ингридиент - diff/patch, и наступит момент истины.&lt;/p&gt;

&lt;h1 id=&#34;момент-истины&#34;&gt;Момент истины&lt;/h1&gt;

&lt;p&gt;Итак, примитивный (не значит что медленный) diff реализован, запускаю без UI. На, нахуй! 1.3ms на итерацию нативный код, 7.8ms на итерацию в V8 (node.js). Это генерация модели + посторение DOM + простроение Diff. Какой-то запас еще есть. Осталось патчить DOM в браузере.&lt;/p&gt;

&lt;h3 id=&#34;21-54-центрально-европейского-времени&#34;&gt;21:54 центрально-европейского времени&lt;/h3&gt;

&lt;p&gt;Готово применение патча в браузере - &lt;code&gt;9.8ms&lt;/code&gt; на итерацию! в Safari. Рано радоваться, поскольку итерация не отрисовывается (я не передаю управление в main loop), отрисовывается только результат последней. Но время обнадеживает: думаю что до 8ms эта история оптимизируется, 8ms оставим на отрисовку, и здравствуй 60 FPS. Правда Chrome дает &lt;code&gt;14ms&lt;/code&gt;, но будем смотреть - сейчас все довольно схематично.&lt;/p&gt;

&lt;p&gt;Выглядит примерно так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;JSrender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//console.log(&amp;quot;RENDER: &amp;quot;, p);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// p is PATCH address&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;//console.log(&amp;quot;cmd: &amp;quot;, cmd);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// HALT&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_UP&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_KID&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nkid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nkid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_PARENT&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_GRAND_PARENT&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_FIRST_CHILD&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_SECOND_CHILD&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nextSibling&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// NAV_NEXT_SIBLING&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nextSibling&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// APPEND&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;renderElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// REMOVE_LAST&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// REMOVE_LAST_MANY&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
          &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ATTR_SET&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AsciiToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]);&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//console.log(&amp;quot;current value: &amp;quot;, element.nodeValue);&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//console.log(&amp;quot;text: &amp;quot;, value);&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nodeValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attributeNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ATTR_REMOVE&lt;/span&gt;
          &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HEAP32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
          &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attributeNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;SHIT HAPPENS&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Завтра лечу в Прагу, а в дороге пока не получается работать. А пока результаты под тегом &lt;code&gt;day-6&lt;/code&gt; &lt;a href=&#34;https://github.com/platoff/faxma/tree/day-6&#34;&gt;https://github.com/platoff/faxma/tree/day-6&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>